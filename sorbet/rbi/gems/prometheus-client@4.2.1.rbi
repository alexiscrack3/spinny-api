# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `prometheus-client` gem.
# Please instead update this file by running `bin/tapioca gem prometheus-client`.

# Prometheus is a generic time-series collection and computation server.
#
# source://prometheus-client//lib/prometheus/client/label_set_validator.rb#3
module Prometheus; end

# Client is a ruby implementation for a Prometheus compatible client.
#
# source://prometheus-client//lib/prometheus/client/label_set_validator.rb#4
module Prometheus::Client
  class << self
    # source://prometheus-client//lib/prometheus/client.rb#14
    def config; end

    # Returns a default registry object
    #
    # source://prometheus-client//lib/prometheus/client.rb#10
    def registry; end
  end
end

# source://prometheus-client//lib/prometheus/client/config.rb#7
class Prometheus::Client::Config
  # @return [Config] a new instance of Config
  #
  # source://prometheus-client//lib/prometheus/client/config.rb#10
  def initialize; end

  # Returns the value of attribute data_store.
  #
  # source://prometheus-client//lib/prometheus/client/config.rb#8
  def data_store; end

  # Sets the attribute data_store
  #
  # @param value the value to set the attribute data_store to.
  #
  # source://prometheus-client//lib/prometheus/client/config.rb#8
  def data_store=(_arg0); end
end

# Counter is a metric that exposes merely a sum or tally of things.
#
# source://prometheus-client//lib/prometheus/client/counter.rb#8
class Prometheus::Client::Counter < ::Prometheus::Client::Metric
  # @raise [ArgumentError]
  #
  # source://prometheus-client//lib/prometheus/client/counter.rb#13
  def increment(by: T.unsafe(nil), labels: T.unsafe(nil)); end

  # source://prometheus-client//lib/prometheus/client/counter.rb#9
  def type; end
end

# source://prometheus-client//lib/prometheus/client/data_stores/synchronized.rb#3
module Prometheus::Client::DataStores; end

# Stores all the data in simple hashes, one per metric. Each of these metrics
# synchronizes access to their hash, but multiple metrics can run observations
# concurrently.
#
# source://prometheus-client//lib/prometheus/client/data_stores/synchronized.rb#7
class Prometheus::Client::DataStores::Synchronized
  # source://prometheus-client//lib/prometheus/client/data_stores/synchronized.rb#10
  def for_metric(metric_name, metric_type:, metric_settings: T.unsafe(nil)); end

  private

  # source://prometheus-client//lib/prometheus/client/data_stores/synchronized.rb#18
  def validate_metric_settings(metric_settings:); end
end

# source://prometheus-client//lib/prometheus/client/data_stores/synchronized.rb#8
class Prometheus::Client::DataStores::Synchronized::InvalidStoreSettingsError < ::StandardError; end

# source://prometheus-client//lib/prometheus/client/data_stores/synchronized.rb#25
class Prometheus::Client::DataStores::Synchronized::MetricStore
  # @return [MetricStore] a new instance of MetricStore
  #
  # source://prometheus-client//lib/prometheus/client/data_stores/synchronized.rb#26
  def initialize; end

  # source://prometheus-client//lib/prometheus/client/data_stores/synchronized.rb#53
  def all_values; end

  # source://prometheus-client//lib/prometheus/client/data_stores/synchronized.rb#47
  def get(labels:); end

  # source://prometheus-client//lib/prometheus/client/data_stores/synchronized.rb#41
  def increment(labels:, by: T.unsafe(nil)); end

  # source://prometheus-client//lib/prometheus/client/data_stores/synchronized.rb#35
  def set(labels:, val:); end

  # source://prometheus-client//lib/prometheus/client/data_stores/synchronized.rb#31
  def synchronize; end
end

# A Gauge is a metric that exposes merely an instantaneous value or some
# snapshot thereof.
#
# source://prometheus-client//lib/prometheus/client/gauge.rb#9
class Prometheus::Client::Gauge < ::Prometheus::Client::Metric
  # Decrements Gauge value by 1 or subtracts the given value from the Gauge.
  # (The value can be negative, resulting in a increase of the Gauge.)
  #
  # source://prometheus-client//lib/prometheus/client/gauge.rb#36
  def decrement(by: T.unsafe(nil), labels: T.unsafe(nil)); end

  # Increments Gauge value by 1 or adds the given value to the Gauge.
  # (The value can be negative, resulting in a decrease of the Gauge.)
  #
  # source://prometheus-client//lib/prometheus/client/gauge.rb#29
  def increment(by: T.unsafe(nil), labels: T.unsafe(nil)); end

  # Sets the value for the given label set
  #
  # source://prometheus-client//lib/prometheus/client/gauge.rb#15
  def set(value, labels: T.unsafe(nil)); end

  # source://prometheus-client//lib/prometheus/client/gauge.rb#23
  def set_to_current_time(labels: T.unsafe(nil)); end

  # source://prometheus-client//lib/prometheus/client/gauge.rb#10
  def type; end
end

# A histogram samples observations (usually things like request durations
# or response sizes) and counts them in configurable buckets. It also
# provides a total count and sum of all observed values.
#
# source://prometheus-client//lib/prometheus/client/histogram.rb#13
class Prometheus::Client::Histogram < ::Prometheus::Client::Metric
  # Offer a way to manually specify buckets
  #
  # @raise [ArgumentError]
  # @return [Histogram] a new instance of Histogram
  #
  # source://prometheus-client//lib/prometheus/client/histogram.rb#20
  def initialize(name, docstring:, labels: T.unsafe(nil), preset_labels: T.unsafe(nil), buckets: T.unsafe(nil), store_settings: T.unsafe(nil)); end

  # Returns the value of attribute buckets.
  #
  # source://prometheus-client//lib/prometheus/client/histogram.rb#17
  def buckets; end

  # Returns a hash with all the buckets plus +Inf (count) plus Sum for the given label set
  #
  # source://prometheus-client//lib/prometheus/client/histogram.rb#88
  def get(labels: T.unsafe(nil)); end

  # source://prometheus-client//lib/prometheus/client/histogram.rb#117
  def init_label_set(labels); end

  # Records a given value. The recorded value is usually positive
  # or zero. A negative value is accepted but prevents current
  # versions of Prometheus from properly detecting counter resets
  # in the sum of observations. See
  # https://prometheus.io/docs/practices/histograms/#count-and-sum-of-observations
  # for details.
  #
  # source://prometheus-client//lib/prometheus/client/histogram.rb#69
  def observe(value, labels: T.unsafe(nil)); end

  # source://prometheus-client//lib/prometheus/client/histogram.rb#59
  def type; end

  # Returns all label sets with their values expressed as hashes with their buckets
  #
  # source://prometheus-client//lib/prometheus/client/histogram.rb#103
  def values; end

  # source://prometheus-client//lib/prometheus/client/histogram.rb#44
  def with_labels(labels); end

  private

  # Modifies the passed in parameter
  #
  # source://prometheus-client//lib/prometheus/client/histogram.rb#130
  def accumulate_buckets(h); end

  # source://prometheus-client//lib/prometheus/client/histogram.rb#142
  def reserved_labels; end

  # @return [Boolean]
  #
  # source://prometheus-client//lib/prometheus/client/histogram.rb#146
  def sorted?(bucket); end

  class << self
    # source://prometheus-client//lib/prometheus/client/histogram.rb#40
    def exponential_buckets(start:, count:, factor: T.unsafe(nil)); end

    # source://prometheus-client//lib/prometheus/client/histogram.rb#36
    def linear_buckets(start:, width:, count:); end
  end
end

# DEFAULT_BUCKETS are the default Histogram buckets. The default buckets
# are tailored to broadly measure the response time (in seconds) of a
# network service. (From DefBuckets client_golang)
#
# source://prometheus-client//lib/prometheus/client/histogram.rb#14
Prometheus::Client::Histogram::DEFAULT_BUCKETS = T.let(T.unsafe(nil), Array)

# LabelSetValidator ensures that all used label sets comply with the
# Prometheus specification.
#
# source://prometheus-client//lib/prometheus/client/label_set_validator.rb#7
class Prometheus::Client::LabelSetValidator
  # @return [LabelSetValidator] a new instance of LabelSetValidator
  #
  # source://prometheus-client//lib/prometheus/client/label_set_validator.rb#18
  def initialize(expected_labels:, reserved_labels: T.unsafe(nil)); end

  # Returns the value of attribute expected_labels.
  #
  # source://prometheus-client//lib/prometheus/client/label_set_validator.rb#16
  def expected_labels; end

  # Returns the value of attribute reserved_labels.
  #
  # source://prometheus-client//lib/prometheus/client/label_set_validator.rb#16
  def reserved_labels; end

  # @raise [InvalidLabelSetError]
  #
  # source://prometheus-client//lib/prometheus/client/label_set_validator.rb#35
  def validate_labelset!(labelset); end

  # source://prometheus-client//lib/prometheus/client/label_set_validator.rb#23
  def validate_symbols!(labels); end

  private

  # @return [Boolean]
  #
  # source://prometheus-client//lib/prometheus/client/label_set_validator.rb#51
  def keys_match?(labelset); end

  # source://prometheus-client//lib/prometheus/client/label_set_validator.rb#61
  def validate_name(key); end

  # @raise [ReservedLabelError]
  #
  # source://prometheus-client//lib/prometheus/client/label_set_validator.rb#73
  def validate_reserved_key(key); end

  # @raise [InvalidLabelError]
  #
  # source://prometheus-client//lib/prometheus/client/label_set_validator.rb#55
  def validate_symbol(key); end
end

# source://prometheus-client//lib/prometheus/client/label_set_validator.rb#8
Prometheus::Client::LabelSetValidator::BASE_RESERVED_LABELS = T.let(T.unsafe(nil), Array)

# source://prometheus-client//lib/prometheus/client/label_set_validator.rb#13
class Prometheus::Client::LabelSetValidator::InvalidLabelError < ::Prometheus::Client::LabelSetValidator::LabelSetError; end

# source://prometheus-client//lib/prometheus/client/label_set_validator.rb#12
class Prometheus::Client::LabelSetValidator::InvalidLabelSetError < ::Prometheus::Client::LabelSetValidator::LabelSetError; end

# source://prometheus-client//lib/prometheus/client/label_set_validator.rb#9
Prometheus::Client::LabelSetValidator::LABEL_NAME_REGEX = T.let(T.unsafe(nil), Regexp)

# source://prometheus-client//lib/prometheus/client/label_set_validator.rb#11
class Prometheus::Client::LabelSetValidator::LabelSetError < ::StandardError; end

# source://prometheus-client//lib/prometheus/client/label_set_validator.rb#14
class Prometheus::Client::LabelSetValidator::ReservedLabelError < ::Prometheus::Client::LabelSetValidator::LabelSetError; end

# Metric
#
# source://prometheus-client//lib/prometheus/client/metric.rb#9
class Prometheus::Client::Metric
  # @return [Metric] a new instance of Metric
  #
  # source://prometheus-client//lib/prometheus/client/metric.rb#12
  def initialize(name, docstring:, labels: T.unsafe(nil), preset_labels: T.unsafe(nil), store_settings: T.unsafe(nil)); end

  # Returns the value of attribute docstring.
  #
  # source://prometheus-client//lib/prometheus/client/metric.rb#10
  def docstring; end

  # Returns the value for the given label set
  #
  # source://prometheus-client//lib/prometheus/client/metric.rb#55
  def get(labels: T.unsafe(nil)); end

  # source://prometheus-client//lib/prometheus/client/metric.rb#74
  def init_label_set(labels); end

  # Returns the value of attribute labels.
  #
  # source://prometheus-client//lib/prometheus/client/metric.rb#10
  def labels; end

  # Returns the value of attribute name.
  #
  # source://prometheus-client//lib/prometheus/client/metric.rb#10
  def name; end

  # Returns the value of attribute preset_labels.
  #
  # source://prometheus-client//lib/prometheus/client/metric.rb#10
  def preset_labels; end

  # Returns all label sets with their values
  #
  # source://prometheus-client//lib/prometheus/client/metric.rb#79
  def values; end

  # source://prometheus-client//lib/prometheus/client/metric.rb#60
  def with_labels(labels); end

  protected

  # source://prometheus-client//lib/prometheus/client/metric.rb#49
  def replace_internal_store(new_store); end

  private

  # source://prometheus-client//lib/prometheus/client/metric.rb#105
  def label_set_for(labels); end

  # source://prometheus-client//lib/prometheus/client/metric.rb#85
  def reserved_labels; end

  # source://prometheus-client//lib/prometheus/client/metric.rb#112
  def stringify_values(labels); end

  # @raise [ArgumentError]
  #
  # source://prometheus-client//lib/prometheus/client/metric.rb#99
  def validate_docstring(docstring); end

  # source://prometheus-client//lib/prometheus/client/metric.rb#89
  def validate_name(name); end
end

# Registry
#
# source://prometheus-client//lib/prometheus/client/registry.rb#13
class Prometheus::Client::Registry
  # @return [Registry] a new instance of Registry
  #
  # source://prometheus-client//lib/prometheus/client/registry.rb#16
  def initialize; end

  # source://prometheus-client//lib/prometheus/client/registry.rb#40
  def counter(name, docstring:, labels: T.unsafe(nil), preset_labels: T.unsafe(nil), store_settings: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://prometheus-client//lib/prometheus/client/registry.rb#75
  def exist?(name); end

  # source://prometheus-client//lib/prometheus/client/registry.rb#56
  def gauge(name, docstring:, labels: T.unsafe(nil), preset_labels: T.unsafe(nil), store_settings: T.unsafe(nil)); end

  # source://prometheus-client//lib/prometheus/client/registry.rb#79
  def get(name); end

  # source://prometheus-client//lib/prometheus/client/registry.rb#64
  def histogram(name, docstring:, labels: T.unsafe(nil), preset_labels: T.unsafe(nil), buckets: T.unsafe(nil), store_settings: T.unsafe(nil)); end

  # source://prometheus-client//lib/prometheus/client/registry.rb#83
  def metrics; end

  # source://prometheus-client//lib/prometheus/client/registry.rb#21
  def register(metric); end

  # source://prometheus-client//lib/prometheus/client/registry.rb#48
  def summary(name, docstring:, labels: T.unsafe(nil), preset_labels: T.unsafe(nil), store_settings: T.unsafe(nil)); end

  # source://prometheus-client//lib/prometheus/client/registry.rb#34
  def unregister(name); end
end

# source://prometheus-client//lib/prometheus/client/registry.rb#14
class Prometheus::Client::Registry::AlreadyRegisteredError < ::StandardError; end

# Summary is an accumulator for samples. It captures Numeric data and
# provides the total count and sum of observations.
#
# source://prometheus-client//lib/prometheus/client/summary.rb#9
class Prometheus::Client::Summary < ::Prometheus::Client::Metric
  # Returns a hash with "sum" and "count" as keys
  #
  # source://prometheus-client//lib/prometheus/client/summary.rb#30
  def get(labels: T.unsafe(nil)); end

  # source://prometheus-client//lib/prometheus/client/summary.rb#53
  def init_label_set(labels); end

  # Records a given value. The recorded value is usually positive
  # or zero. A negative value is accepted but prevents current
  # versions of Prometheus from properly detecting counter resets
  # in the sum of observations. See
  # https://prometheus.io/docs/practices/histograms/#count-and-sum-of-observations
  # for details.
  #
  # source://prometheus-client//lib/prometheus/client/summary.rb#20
  def observe(value, labels: T.unsafe(nil)); end

  # source://prometheus-client//lib/prometheus/client/summary.rb#10
  def type; end

  # Returns all label sets with their values expressed as hashes with their sum/count
  #
  # source://prometheus-client//lib/prometheus/client/summary.rb#43
  def values; end

  private

  # source://prometheus-client//lib/prometheus/client/summary.rb#64
  def reserved_labels; end
end
